
//Implement the three member functions of linked_list class: sort, remove_all, and insert as described in the code blow

#include <iostream>
#include <fstream>
using namespace std;

ofstream out("data1.txt");

class node {
public:
	int value;
	node * next;
	node() { next = nullptr; }
	node(int k) { value = k; next = nullptr; }
};

class linked_list {
public:
	int num_nodes;
	node * head;
	linked_list() { num_nodes = 0; head = nullptr; }
	void make_random_list(int k);//create a linked list of k nodes with values in 0 ..99 randomly
								 
	void new_make_random_list(int k, int m);//create a linked list of k nodes with values in 0 .. m randomly

	void print(); //Print values of all nodes from head node
	
	void selection_sort(); //Sort the nodes, based on ascending order of node values

	void bubble_sort();
	void insertion_sort();

};

void linked_list::make_random_list(int k) {
	node * p;
	for (int i = 0; i < k; i++) {
		p = new node(rand() % 100);
		p->next = head;
		head = p;
		num_nodes++;
	}

}

void linked_list::new_make_random_list(int k, int m) {
	node * p;
	for (int i = 0; i < k; i++) {
		p = new node(rand() % m);
		p->next = head;
		head = p;
		num_nodes++;
	}

}

void linked_list::print() {
	node * p = head;
	out << endl;
	while (p != nullptr) {
		out << p->value << " ";
		p = p->next;
	}
}


void linked_list::selection_sort() {

	node * i, *j;
	node * k = nullptr;
	int min, temp;

	for (i = head; i != nullptr; i = i->next)
	{
		min = i->value;

		for (j = i->next; j != nullptr; j = j->next)
		{
			if (j->value < min)
			{
				min = j->value;
				k = j;
			}

		}
		if (min != i->value)
		{
			k->value = min;
			temp = i->value;
			i->value = k->value;
			k->value = temp;
		}
	}

}


void linked_list::bubble_sort() {

	if (head != nullptr)
	{
		node * i, *j;
		int temp;
		for (i = head; i != nullptr; i = i->next)
		{
			for (j = i->next; j != nullptr; j = j->next)
			{
				if (i->value > j->value)
				{
					temp = i->value;
					i->value = j->value;
					j->value = temp;
				}
			}
		}
	}
	else
	{
		std::cout << "Linked list is empty" << endl;
		return;
	}

} 



void linked_list::insertion_sort() {

	node* i = head;
	for (i; i->next!= nullptr;i->next)
	{
    	node* key = i->next;
		node* j = head;
		for(j; j!=key; j->next)	
		{
			if (key->value < j->value)
			{	int temp = j->value;
				j->value = key->value;
				key->value = temp;
			}
			j = j->next; 
		}
		i = i->next;
	}
}

int main() {

	//Some examples of tests for your program are given below
	//During grading, other test cases will also be used

	linked_list L1;
	L1.make_random_list(70);
	L1.print();
	L1.bubble_sort();
	L1.print();

	cout << endl;

	linked_list L2;
	L2.make_random_list(70);
	L2.print();
	L2.selection_sort();
	L2.print();

	cout << endl;

	linked_list L3;
	L3.make_random_list(70);
	L3.print();
	L3.insertion_sort();
	L3.print();

	out.close();
	return 0;

}
